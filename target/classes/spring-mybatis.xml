<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx 
           				http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
           				http://www.springframework.org/schema/aop 
           				http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
              
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.coffee" />
		
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

 	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown">
		<property name="driverClassName" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="connectionTimeout" value="${connectionTimeout}" />
		<property name="idleTimeout" value="${idleTimeout}" />
		<property name="maxLifetime" value="${maxLifetime}" />
		<property name="maximumPoolSize" value="${maximumPoolSize}" />
	</bean>
		
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />	
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/coffee/*/mappper/*.xml"></property>
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.coffee.*.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  

    <!-- 事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
   <!-- 事务管理 通知  	  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚  -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <!--select,count开头的方法,开启只读,提高数据库访问性能  -->
            <tx:method name="select*" read-only="true"/>  
            <tx:method name="count*" read-only="true"/>  
            <!--对其他方法 使用默认的事务管理  -->
            <tx:method name="*"/>  
        </tx:attributes>
    </tx:advice>  
    
    <!--事务管理 AOP配置  -->
	<aop:config>
	     <aop:pointcut expression="execution(* com.coffee.service.*.*(..))" id="pointCut" />
	     <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config> 
</beans>